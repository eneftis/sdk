/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace Decimal {
    export type DecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type DecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace SignedDecimal {
    export type SignedDecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type SignedDecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace IAmm {
    export type RatiosStruct = {
        feeRatio: Decimal.DecimalStruct;
        initMarginRatio: Decimal.DecimalStruct;
        maintenanceMarginRatio: Decimal.DecimalStruct;
        partialLiquidationRatio: Decimal.DecimalStruct;
        liquidationFeeRatio: Decimal.DecimalStruct;
    };

    export type RatiosStructOutput = [
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput
    ] & {
        feeRatio: Decimal.DecimalStructOutput;
        initMarginRatio: Decimal.DecimalStructOutput;
        maintenanceMarginRatio: Decimal.DecimalStructOutput;
        partialLiquidationRatio: Decimal.DecimalStructOutput;
        liquidationFeeRatio: Decimal.DecimalStructOutput;
    };
}

export interface AmmInterface extends utils.Interface {
    functions: {
        "_x0()": FunctionFragment;
        "_y0()": FunctionFragment;
        "baseAssetDeltaThisFundingPeriod()": FunctionFragment;
        "baseAssetReserve()": FunctionFragment;
        "calcFee(uint8,(uint256),bool)": FunctionFragment;
        "calcKRepegPnl((uint256))": FunctionFragment;
        "calcPriceRepegPnl((uint256))": FunctionFragment;
        "counterParty()": FunctionFragment;
        "cumulativeNotional()": FunctionFragment;
        "fluctuationLimitRatio()": FunctionFragment;
        "fundingBufferPeriod()": FunctionFragment;
        "fundingPeriod()": FunctionFragment;
        "fundingRate()": FunctionFragment;
        "getBaseAssetDelta()": FunctionFragment;
        "getCumulativeNotional()": FunctionFragment;
        "getFeeRatio()": FunctionFragment;
        "getIndexPrice()": FunctionFragment;
        "getInitMarginRatio()": FunctionFragment;
        "getInputPrice(uint8,(uint256))": FunctionFragment;
        "getInputPriceWithReserves(uint8,(uint256),(uint256),(uint256))": FunctionFragment;
        "getInputTwap(uint8,(uint256))": FunctionFragment;
        "getLiquidationFeeRatio()": FunctionFragment;
        "getMaintenanceMarginRatio()": FunctionFragment;
        "getMarkPrice()": FunctionFragment;
        "getMaxHoldingBaseAsset()": FunctionFragment;
        "getOpenInterestNotionalCap()": FunctionFragment;
        "getOutputPrice(uint8,(uint256))": FunctionFragment;
        "getOutputPriceWithReserves(uint8,(uint256),(uint256),(uint256))": FunctionFragment;
        "getOutputTwap(uint8,(uint256))": FunctionFragment;
        "getPartialLiquidationRatio()": FunctionFragment;
        "getRatios()": FunctionFragment;
        "getReserves()": FunctionFragment;
        "getSnapshotLen()": FunctionFragment;
        "getTwapPrice(uint256)": FunctionFragment;
        "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256)": FunctionFragment;
        "isOverFluctuationLimit(uint8,(uint256))": FunctionFragment;
        "isOverSpreadLimit()": FunctionFragment;
        "k()": FunctionFragment;
        "lastRepegTimestamp()": FunctionFragment;
        "level1DynamicFeeSettings()": FunctionFragment;
        "level2DynamicFeeSettings()": FunctionFragment;
        "markPriceTwapInterval()": FunctionFragment;
        "nextFundingTime()": FunctionFragment;
        "open()": FunctionFragment;
        "owner()": FunctionFragment;
        "priceFeed()": FunctionFragment;
        "priceFeedKey()": FunctionFragment;
        "quoteAsset()": FunctionFragment;
        "quoteAssetReserve()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "repegBufferPeriod()": FunctionFragment;
        "repegK((uint256))": FunctionFragment;
        "repegPrice()": FunctionFragment;
        "reserveSnapshots(uint256)": FunctionFragment;
        "setCap((uint256),(uint256))": FunctionFragment;
        "setCounterParty(address)": FunctionFragment;
        "setFeeRatio((uint256))": FunctionFragment;
        "setFluctuationLimitRatio((uint256))": FunctionFragment;
        "setFundingPeriod(uint256)": FunctionFragment;
        "setInitMarginRatio((uint256))": FunctionFragment;
        "setLevel1DynamicFeeSettings((uint256),(uint256),(uint256))": FunctionFragment;
        "setLevel2DynamicFeeSettings((uint256),(uint256),(uint256))": FunctionFragment;
        "setLiquidationFeeRatio((uint256))": FunctionFragment;
        "setMaintenanceMarginRatio((uint256))": FunctionFragment;
        "setMarkPriceTwapInterval(uint256)": FunctionFragment;
        "setOpen(bool)": FunctionFragment;
        "setPartialLiquidationRatio((uint256))": FunctionFragment;
        "setPriceFeed(address)": FunctionFragment;
        "setRepegBufferPeriod(uint256)": FunctionFragment;
        "setTradeLimitRatio((uint256))": FunctionFragment;
        "settleFunding()": FunctionFragment;
        "swapInput(uint8,(uint256),(uint256),bool)": FunctionFragment;
        "swapOutput(uint8,(uint256),(uint256))": FunctionFragment;
        "totalPositionSize()": FunctionFragment;
        "tradeLimitRatio()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateFundingRate((int256),(int256),(uint256))": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "_x0"
            | "_y0"
            | "baseAssetDeltaThisFundingPeriod"
            | "baseAssetReserve"
            | "calcFee"
            | "calcKRepegPnl"
            | "calcPriceRepegPnl"
            | "counterParty"
            | "cumulativeNotional"
            | "fluctuationLimitRatio"
            | "fundingBufferPeriod"
            | "fundingPeriod"
            | "fundingRate"
            | "getBaseAssetDelta"
            | "getCumulativeNotional"
            | "getFeeRatio"
            | "getIndexPrice"
            | "getInitMarginRatio"
            | "getInputPrice"
            | "getInputPriceWithReserves"
            | "getInputTwap"
            | "getLiquidationFeeRatio"
            | "getMaintenanceMarginRatio"
            | "getMarkPrice"
            | "getMaxHoldingBaseAsset"
            | "getOpenInterestNotionalCap"
            | "getOutputPrice"
            | "getOutputPriceWithReserves"
            | "getOutputTwap"
            | "getPartialLiquidationRatio"
            | "getRatios"
            | "getReserves"
            | "getSnapshotLen"
            | "getTwapPrice"
            | "initialize"
            | "isOverFluctuationLimit"
            | "isOverSpreadLimit"
            | "k"
            | "lastRepegTimestamp"
            | "level1DynamicFeeSettings"
            | "level2DynamicFeeSettings"
            | "markPriceTwapInterval"
            | "nextFundingTime"
            | "open"
            | "owner"
            | "priceFeed"
            | "priceFeedKey"
            | "quoteAsset"
            | "quoteAssetReserve"
            | "renounceOwnership"
            | "repegBufferPeriod"
            | "repegK"
            | "repegPrice"
            | "reserveSnapshots"
            | "setCap"
            | "setCounterParty"
            | "setFeeRatio"
            | "setFluctuationLimitRatio"
            | "setFundingPeriod"
            | "setInitMarginRatio"
            | "setLevel1DynamicFeeSettings"
            | "setLevel2DynamicFeeSettings"
            | "setLiquidationFeeRatio"
            | "setMaintenanceMarginRatio"
            | "setMarkPriceTwapInterval"
            | "setOpen"
            | "setPartialLiquidationRatio"
            | "setPriceFeed"
            | "setRepegBufferPeriod"
            | "setTradeLimitRatio"
            | "settleFunding"
            | "swapInput"
            | "swapOutput"
            | "totalPositionSize"
            | "tradeLimitRatio"
            | "transferOwnership"
            | "updateFundingRate"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "_x0", values?: undefined): string;
    encodeFunctionData(functionFragment: "_y0", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "baseAssetDeltaThisFundingPeriod",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "baseAssetReserve", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "calcFee",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct, PromiseOrValue<boolean>]
    ): string;
    encodeFunctionData(functionFragment: "calcKRepegPnl", values: [Decimal.DecimalStruct]): string;
    encodeFunctionData(
        functionFragment: "calcPriceRepegPnl",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "counterParty", values?: undefined): string;
    encodeFunctionData(functionFragment: "cumulativeNotional", values?: undefined): string;
    encodeFunctionData(functionFragment: "fluctuationLimitRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "fundingBufferPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "fundingPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "fundingRate", values?: undefined): string;
    encodeFunctionData(functionFragment: "getBaseAssetDelta", values?: undefined): string;
    encodeFunctionData(functionFragment: "getCumulativeNotional", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFeeRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "getIndexPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getInitMarginRatio", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getInputPrice",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "getInputPriceWithReserves",
        values: [
            PromiseOrValue<BigNumberish>,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "getInputTwap",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "getLiquidationFeeRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMaintenanceMarginRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMarkPrice", values?: undefined): string;
    encodeFunctionData(functionFragment: "getMaxHoldingBaseAsset", values?: undefined): string;
    encodeFunctionData(functionFragment: "getOpenInterestNotionalCap", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getOutputPrice",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "getOutputPriceWithReserves",
        values: [
            PromiseOrValue<BigNumberish>,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "getOutputTwap",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "getPartialLiquidationRatio", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRatios", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReserves", values?: undefined): string;
    encodeFunctionData(functionFragment: "getSnapshotLen", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getTwapPrice",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "isOverFluctuationLimit",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "isOverSpreadLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "k", values?: undefined): string;
    encodeFunctionData(functionFragment: "lastRepegTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "level1DynamicFeeSettings", values?: undefined): string;
    encodeFunctionData(functionFragment: "level2DynamicFeeSettings", values?: undefined): string;
    encodeFunctionData(functionFragment: "markPriceTwapInterval", values?: undefined): string;
    encodeFunctionData(functionFragment: "nextFundingTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "open", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
    encodeFunctionData(functionFragment: "priceFeedKey", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteAsset", values?: undefined): string;
    encodeFunctionData(functionFragment: "quoteAssetReserve", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "repegBufferPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "repegK", values: [Decimal.DecimalStruct]): string;
    encodeFunctionData(functionFragment: "repegPrice", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "reserveSnapshots",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "setCap",
        values: [Decimal.DecimalStruct, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setCounterParty",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "setFeeRatio", values: [Decimal.DecimalStruct]): string;
    encodeFunctionData(
        functionFragment: "setFluctuationLimitRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setFundingPeriod",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "setInitMarginRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setLevel1DynamicFeeSettings",
        values: [Decimal.DecimalStruct, Decimal.DecimalStruct, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setLevel2DynamicFeeSettings",
        values: [Decimal.DecimalStruct, Decimal.DecimalStruct, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setLiquidationFeeRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setMaintenanceMarginRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "setMarkPriceTwapInterval",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "setOpen", values: [PromiseOrValue<boolean>]): string;
    encodeFunctionData(
        functionFragment: "setPartialLiquidationRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "setPriceFeed", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "setRepegBufferPeriod",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "setTradeLimitRatio",
        values: [Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "settleFunding", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "swapInput",
        values: [
            PromiseOrValue<BigNumberish>,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct,
            PromiseOrValue<boolean>
        ]
    ): string;
    encodeFunctionData(
        functionFragment: "swapOutput",
        values: [PromiseOrValue<BigNumberish>, Decimal.DecimalStruct, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "totalPositionSize", values?: undefined): string;
    encodeFunctionData(functionFragment: "tradeLimitRatio", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "updateFundingRate",
        values: [
            SignedDecimal.SignedDecimalStruct,
            SignedDecimal.SignedDecimalStruct,
            Decimal.DecimalStruct
        ]
    ): string;

    decodeFunctionResult(functionFragment: "_x0", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_y0", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "baseAssetDeltaThisFundingPeriod",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "baseAssetReserve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calcKRepegPnl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calcPriceRepegPnl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "counterParty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cumulativeNotional", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fluctuationLimitRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fundingBufferPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fundingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fundingRate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getBaseAssetDelta", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCumulativeNotional", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFeeRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getIndexPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInitMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInputPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInputPriceWithReserves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getInputTwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLiquidationFeeRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaintenanceMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMarkPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMaxHoldingBaseAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOpenInterestNotionalCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutputPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutputPriceWithReserves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOutputTwap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPartialLiquidationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRatios", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReserves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSnapshotLen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTwapPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOverFluctuationLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isOverSpreadLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastRepegTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "level1DynamicFeeSettings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "level2DynamicFeeSettings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "markPriceTwapInterval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nextFundingTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "priceFeedKey", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteAssetReserve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegBufferPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegK", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reserveSnapshots", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCounterParty", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFeeRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFluctuationLimitRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setFundingPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setInitMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLevel1DynamicFeeSettings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLevel2DynamicFeeSettings", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setLiquidationFeeRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMaintenanceMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMarkPriceTwapInterval", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOpen", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPartialLiquidationRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPriceFeed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRepegBufferPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTradeLimitRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settleFunding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalPositionSize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeLimitRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFundingRate", data: BytesLike): Result;

    events: {
        "CapChanged(uint256,uint256)": EventFragment;
        "FeeRatioChanged(uint256)": EventFragment;
        "FluctuationLimitRatioChanged(uint256)": EventFragment;
        "FundingPeriodChanged(uint256)": EventFragment;
        "FundingRateUpdated(int256,int256,uint256)": EventFragment;
        "InitMarginRatioChanged(uint256)": EventFragment;
        "Level1DynamicFeeSettingsChanged(uint256,uint256,uint256)": EventFragment;
        "Level2DynamicFeeSettingsChanged(uint256,uint256,uint256)": EventFragment;
        "LiquidationFeeRatioChanged(uint256)": EventFragment;
        "MaintenanceMarginRatioChanged(uint256)": EventFragment;
        "Open(bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "PartialLiquidationRatioChanged(uint256)": EventFragment;
        "PriceFeedUpdated(address)": EventFragment;
        "Repeg(uint256,uint256,uint256,uint256,int256)": EventFragment;
        "ReserveSnapshotted(uint256,uint256,uint256)": EventFragment;
        "SwapInput(uint8,uint256,uint256)": EventFragment;
        "SwapOutput(uint8,uint256,uint256)": EventFragment;
        "TradeLimitRatioChanged(uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "CapChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FeeRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FluctuationLimitRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundingPeriodChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundingRateUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "InitMarginRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Level1DynamicFeeSettingsChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Level2DynamicFeeSettingsChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LiquidationFeeRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MaintenanceMarginRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PartialLiquidationRatioChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Repeg"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ReserveSnapshotted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SwapInput"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SwapOutput"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TradeLimitRatioChanged"): EventFragment;
}

export interface CapChangedEventObject {
    maxHoldingBaseAsset: BigNumber;
    openInterestNotionalCap: BigNumber;
}
export type CapChangedEvent = TypedEvent<[BigNumber, BigNumber], CapChangedEventObject>;

export type CapChangedEventFilter = TypedEventFilter<CapChangedEvent>;

export interface FeeRatioChangedEventObject {
    ratio: BigNumber;
}
export type FeeRatioChangedEvent = TypedEvent<[BigNumber], FeeRatioChangedEventObject>;

export type FeeRatioChangedEventFilter = TypedEventFilter<FeeRatioChangedEvent>;

export interface FluctuationLimitRatioChangedEventObject {
    ratio: BigNumber;
}
export type FluctuationLimitRatioChangedEvent = TypedEvent<
    [BigNumber],
    FluctuationLimitRatioChangedEventObject
>;

export type FluctuationLimitRatioChangedEventFilter =
    TypedEventFilter<FluctuationLimitRatioChangedEvent>;

export interface FundingPeriodChangedEventObject {
    fundingPeriod: BigNumber;
}
export type FundingPeriodChangedEvent = TypedEvent<[BigNumber], FundingPeriodChangedEventObject>;

export type FundingPeriodChangedEventFilter = TypedEventFilter<FundingPeriodChangedEvent>;

export interface FundingRateUpdatedEventObject {
    fundingRateLong: BigNumber;
    fundingRateShort: BigNumber;
    underlyingPrice: BigNumber;
}
export type FundingRateUpdatedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    FundingRateUpdatedEventObject
>;

export type FundingRateUpdatedEventFilter = TypedEventFilter<FundingRateUpdatedEvent>;

export interface InitMarginRatioChangedEventObject {
    ratio: BigNumber;
}
export type InitMarginRatioChangedEvent = TypedEvent<
    [BigNumber],
    InitMarginRatioChangedEventObject
>;

export type InitMarginRatioChangedEventFilter = TypedEventFilter<InitMarginRatioChangedEvent>;

export interface Level1DynamicFeeSettingsChangedEventObject {
    divergenceThresholdRatio: BigNumber;
    feeRatio: BigNumber;
    feeInFavorRatio: BigNumber;
}
export type Level1DynamicFeeSettingsChangedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    Level1DynamicFeeSettingsChangedEventObject
>;

export type Level1DynamicFeeSettingsChangedEventFilter =
    TypedEventFilter<Level1DynamicFeeSettingsChangedEvent>;

export interface Level2DynamicFeeSettingsChangedEventObject {
    divergenceThresholdRatio: BigNumber;
    feeRatio: BigNumber;
    feeInFavorRatio: BigNumber;
}
export type Level2DynamicFeeSettingsChangedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    Level2DynamicFeeSettingsChangedEventObject
>;

export type Level2DynamicFeeSettingsChangedEventFilter =
    TypedEventFilter<Level2DynamicFeeSettingsChangedEvent>;

export interface LiquidationFeeRatioChangedEventObject {
    ratio: BigNumber;
}
export type LiquidationFeeRatioChangedEvent = TypedEvent<
    [BigNumber],
    LiquidationFeeRatioChangedEventObject
>;

export type LiquidationFeeRatioChangedEventFilter =
    TypedEventFilter<LiquidationFeeRatioChangedEvent>;

export interface MaintenanceMarginRatioChangedEventObject {
    ratio: BigNumber;
}
export type MaintenanceMarginRatioChangedEvent = TypedEvent<
    [BigNumber],
    MaintenanceMarginRatioChangedEventObject
>;

export type MaintenanceMarginRatioChangedEventFilter =
    TypedEventFilter<MaintenanceMarginRatioChangedEvent>;

export interface OpenEventObject {
    open: boolean;
}
export type OpenEvent = TypedEvent<[boolean], OpenEventObject>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PartialLiquidationRatioChangedEventObject {
    ratio: BigNumber;
}
export type PartialLiquidationRatioChangedEvent = TypedEvent<
    [BigNumber],
    PartialLiquidationRatioChangedEventObject
>;

export type PartialLiquidationRatioChangedEventFilter =
    TypedEventFilter<PartialLiquidationRatioChangedEvent>;

export interface PriceFeedUpdatedEventObject {
    priceFeed: string;
}
export type PriceFeedUpdatedEvent = TypedEvent<[string], PriceFeedUpdatedEventObject>;

export type PriceFeedUpdatedEventFilter = TypedEventFilter<PriceFeedUpdatedEvent>;

export interface RepegEventObject {
    quoteAssetReserveBefore: BigNumber;
    baseAssetReserveBefore: BigNumber;
    quoteAssetReserveAfter: BigNumber;
    baseAssetReserveAfter: BigNumber;
    repegPnl: BigNumber;
}
export type RepegEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    RepegEventObject
>;

export type RepegEventFilter = TypedEventFilter<RepegEvent>;

export interface ReserveSnapshottedEventObject {
    quoteAssetReserve: BigNumber;
    baseAssetReserve: BigNumber;
    timestamp: BigNumber;
}
export type ReserveSnapshottedEvent = TypedEvent<
    [BigNumber, BigNumber, BigNumber],
    ReserveSnapshottedEventObject
>;

export type ReserveSnapshottedEventFilter = TypedEventFilter<ReserveSnapshottedEvent>;

export interface SwapInputEventObject {
    dir: number;
    quoteAssetAmount: BigNumber;
    baseAssetAmount: BigNumber;
}
export type SwapInputEvent = TypedEvent<[number, BigNumber, BigNumber], SwapInputEventObject>;

export type SwapInputEventFilter = TypedEventFilter<SwapInputEvent>;

export interface SwapOutputEventObject {
    dir: number;
    quoteAssetAmount: BigNumber;
    baseAssetAmount: BigNumber;
}
export type SwapOutputEvent = TypedEvent<[number, BigNumber, BigNumber], SwapOutputEventObject>;

export type SwapOutputEventFilter = TypedEventFilter<SwapOutputEvent>;

export interface TradeLimitRatioChangedEventObject {
    ratio: BigNumber;
}
export type TradeLimitRatioChangedEvent = TypedEvent<
    [BigNumber],
    TradeLimitRatioChangedEventObject
>;

export type TradeLimitRatioChangedEventFilter = TypedEventFilter<TradeLimitRatioChangedEvent>;

export interface Amm extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: AmmInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        _x0(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        _y0(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        baseAssetDeltaThisFundingPeriod(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        baseAssetReserve(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        calcFee(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _isOpenPos: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput] & { fees: Decimal.DecimalStructOutput }>;

        calcKRepegPnl(
            _k: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<
            [SignedDecimal.SignedDecimalStructOutput] & {
                repegPnl: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        calcPriceRepegPnl(
            _repegTo: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<
            [SignedDecimal.SignedDecimalStructOutput] & {
                repegPnl: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        counterParty(overrides?: CallOverrides): Promise<[string]>;

        cumulativeNotional(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        fluctuationLimitRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        fundingBufferPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

        fundingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

        fundingRate(overrides?: CallOverrides): Promise<
            [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                fundingRateLong: SignedDecimal.SignedDecimalStructOutput;
                fundingRateShort: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        getBaseAssetDelta(
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

        getCumulativeNotional(
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

        getFeeRatio(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getIndexPrice(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getInitMarginRatio(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getInputPrice(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getInputPriceWithReserves(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getInputTwap(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getLiquidationFeeRatio(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getMaintenanceMarginRatio(
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getMarkPrice(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<[Decimal.DecimalStructOutput]>;

        getOpenInterestNotionalCap(
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getOutputPrice(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getOutputPriceWithReserves(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getOutputTwap(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getPartialLiquidationRatio(
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        getRatios(overrides?: CallOverrides): Promise<[IAmm.RatiosStructOutput]>;

        getReserves(
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput, Decimal.DecimalStructOutput]>;

        getSnapshotLen(overrides?: CallOverrides): Promise<[BigNumber]>;

        getTwapPrice(
            _intervalInSeconds: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput]>;

        initialize(
            _quoteAssetReserve: PromiseOrValue<BigNumberish>,
            _baseAssetReserve: PromiseOrValue<BigNumberish>,
            _tradeLimitRatio: PromiseOrValue<BigNumberish>,
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            _priceFeed: PromiseOrValue<string>,
            _priceFeedKey: PromiseOrValue<BytesLike>,
            _quoteAsset: PromiseOrValue<string>,
            _fluctuationLimitRatio: PromiseOrValue<BigNumberish>,
            _feeRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        isOverFluctuationLimit(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        isOverSpreadLimit(overrides?: CallOverrides): Promise<[boolean]>;

        k(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        lastRepegTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

        level1DynamicFeeSettings(overrides?: CallOverrides): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                divergenceThresholdRatio: Decimal.DecimalStructOutput;
                feeRatio: Decimal.DecimalStructOutput;
                feeInFavorRatio: Decimal.DecimalStructOutput;
            }
        >;

        level2DynamicFeeSettings(overrides?: CallOverrides): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                divergenceThresholdRatio: Decimal.DecimalStructOutput;
                feeRatio: Decimal.DecimalStructOutput;
                feeInFavorRatio: Decimal.DecimalStructOutput;
            }
        >;

        markPriceTwapInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

        nextFundingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

        open(overrides?: CallOverrides): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        priceFeed(overrides?: CallOverrides): Promise<[string]>;

        priceFeedKey(overrides?: CallOverrides): Promise<[string]>;

        quoteAsset(overrides?: CallOverrides): Promise<[string]>;

        quoteAssetReserve(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        repegBufferPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

        repegK(
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        repegPrice(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        reserveSnapshots(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [Decimal.DecimalStructOutput, Decimal.DecimalStructOutput, BigNumber, BigNumber] & {
                quoteAssetReserve: Decimal.DecimalStructOutput;
                baseAssetReserve: Decimal.DecimalStructOutput;
                timestamp: BigNumber;
                blockNumber: BigNumber;
            }
        >;

        setCap(
            _maxHoldingBaseAsset: Decimal.DecimalStruct,
            _openInterestNotionalCap: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setCounterParty(
            _counterParty: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setFeeRatio(
            _feeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setFluctuationLimitRatio(
            _fluctuationLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setFundingPeriod(
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setInitMarginRatio(
            _initMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setLevel1DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setLevel2DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setLiquidationFeeRatio(
            _liquidationFeeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setMaintenanceMarginRatio(
            _maintenanceMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setMarkPriceTwapInterval(
            _interval: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setOpen(
            _open: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setPartialLiquidationRatio(
            _partialLiquidationRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setRepegBufferPeriod(
            _repegBufferPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setTradeLimitRatio(
            _tradeLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        settleFunding(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        swapInput(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            _canOverFluctuationLimit: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        swapOutput(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        totalPositionSize(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        tradeLimitRatio(overrides?: CallOverrides): Promise<[BigNumber] & { d: BigNumber }>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        updateFundingRate(
            _premiumFractionLong: SignedDecimal.SignedDecimalStruct,
            _premiumFractionShort: SignedDecimal.SignedDecimalStruct,
            _underlyingPrice: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    _x0(overrides?: CallOverrides): Promise<BigNumber>;

    _y0(overrides?: CallOverrides): Promise<BigNumber>;

    baseAssetDeltaThisFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    calcFee(
        _dirOfQuote: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        _isOpenPos: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    calcKRepegPnl(
        _k: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    calcPriceRepegPnl(
        _repegTo: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    counterParty(overrides?: CallOverrides): Promise<string>;

    cumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

    fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<
        [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
            fundingRateLong: SignedDecimal.SignedDecimalStructOutput;
            fundingRateShort: SignedDecimal.SignedDecimalStructOutput;
        }
    >;

    getBaseAssetDelta(overrides?: CallOverrides): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getCumulativeNotional(
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getFeeRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getIndexPrice(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getInitMarginRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getInputPrice(
        _dirOfQuote: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getInputPriceWithReserves(
        _dirOfQuote: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        _quoteAssetPoolAmount: Decimal.DecimalStruct,
        _baseAssetPoolAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getInputTwap(
        _dirOfQuote: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getLiquidationFeeRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getMaintenanceMarginRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getMarkPrice(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getOutputPrice(
        _dirOfBase: PromiseOrValue<BigNumberish>,
        _baseAssetAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getOutputPriceWithReserves(
        _dirOfBase: PromiseOrValue<BigNumberish>,
        _baseAssetAmount: Decimal.DecimalStruct,
        _quoteAssetPoolAmount: Decimal.DecimalStruct,
        _baseAssetPoolAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getOutputTwap(
        _dirOfBase: PromiseOrValue<BigNumberish>,
        _baseAssetAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getPartialLiquidationRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

    getRatios(overrides?: CallOverrides): Promise<IAmm.RatiosStructOutput>;

    getReserves(
        overrides?: CallOverrides
    ): Promise<[Decimal.DecimalStructOutput, Decimal.DecimalStructOutput]>;

    getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapPrice(
        _intervalInSeconds: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    initialize(
        _quoteAssetReserve: PromiseOrValue<BigNumberish>,
        _baseAssetReserve: PromiseOrValue<BigNumberish>,
        _tradeLimitRatio: PromiseOrValue<BigNumberish>,
        _fundingPeriod: PromiseOrValue<BigNumberish>,
        _priceFeed: PromiseOrValue<string>,
        _priceFeedKey: PromiseOrValue<BytesLike>,
        _quoteAsset: PromiseOrValue<string>,
        _fluctuationLimitRatio: PromiseOrValue<BigNumberish>,
        _feeRatio: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOverFluctuationLimit(
        _dirOfBase: PromiseOrValue<BigNumberish>,
        _baseAssetAmount: Decimal.DecimalStruct,
        overrides?: CallOverrides
    ): Promise<boolean>;

    isOverSpreadLimit(overrides?: CallOverrides): Promise<boolean>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    lastRepegTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    level1DynamicFeeSettings(overrides?: CallOverrides): Promise<
        [Decimal.DecimalStructOutput, Decimal.DecimalStructOutput, Decimal.DecimalStructOutput] & {
            divergenceThresholdRatio: Decimal.DecimalStructOutput;
            feeRatio: Decimal.DecimalStructOutput;
            feeInFavorRatio: Decimal.DecimalStructOutput;
        }
    >;

    level2DynamicFeeSettings(overrides?: CallOverrides): Promise<
        [Decimal.DecimalStructOutput, Decimal.DecimalStructOutput, Decimal.DecimalStructOutput] & {
            divergenceThresholdRatio: Decimal.DecimalStructOutput;
            feeRatio: Decimal.DecimalStructOutput;
            feeInFavorRatio: Decimal.DecimalStructOutput;
        }
    >;

    markPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    priceFeedKey(overrides?: CallOverrides): Promise<string>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repegBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    repegK(
        _multiplier: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repegPrice(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveSnapshots(
        arg0: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [Decimal.DecimalStructOutput, Decimal.DecimalStructOutput, BigNumber, BigNumber] & {
            quoteAssetReserve: Decimal.DecimalStructOutput;
            baseAssetReserve: Decimal.DecimalStructOutput;
            timestamp: BigNumber;
            blockNumber: BigNumber;
        }
    >;

    setCap(
        _maxHoldingBaseAsset: Decimal.DecimalStruct,
        _openInterestNotionalCap: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCounterParty(
        _counterParty: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRatio(
        _feeRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFluctuationLimitRatio(
        _fluctuationLimitRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFundingPeriod(
        _fundingPeriod: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInitMarginRatio(
        _initMarginRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLevel1DynamicFeeSettings(
        _divergenceThresholdRatio: Decimal.DecimalStruct,
        _feeRatio: Decimal.DecimalStruct,
        _feeInFavorRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLevel2DynamicFeeSettings(
        _divergenceThresholdRatio: Decimal.DecimalStruct,
        _feeRatio: Decimal.DecimalStruct,
        _feeInFavorRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationFeeRatio(
        _liquidationFeeRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintenanceMarginRatio(
        _maintenanceMarginRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarkPriceTwapInterval(
        _interval: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOpen(
        _open: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPartialLiquidationRatio(
        _partialLiquidationRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
        _priceFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRepegBufferPeriod(
        _repegBufferPeriod: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTradeLimitRatio(
        _tradeLimitRatio: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleFunding(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapInput(
        _dirOfQuote: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        _baseAssetAmountLimit: Decimal.DecimalStruct,
        _canOverFluctuationLimit: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapOutput(
        _dirOfBase: PromiseOrValue<BigNumberish>,
        _baseAssetAmount: Decimal.DecimalStruct,
        _quoteAssetAmountLimit: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFundingRate(
        _premiumFractionLong: SignedDecimal.SignedDecimalStruct,
        _premiumFractionShort: SignedDecimal.SignedDecimalStruct,
        _underlyingPrice: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        _x0(overrides?: CallOverrides): Promise<BigNumber>;

        _y0(overrides?: CallOverrides): Promise<BigNumber>;

        baseAssetDeltaThisFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

        calcFee(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _isOpenPos: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        calcKRepegPnl(
            _k: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        calcPriceRepegPnl(
            _repegTo: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        counterParty(overrides?: CallOverrides): Promise<string>;

        cumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

        fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

        fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        fundingRate(overrides?: CallOverrides): Promise<
            [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                fundingRateLong: SignedDecimal.SignedDecimalStructOutput;
                fundingRateShort: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        getBaseAssetDelta(
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        getCumulativeNotional(
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        getFeeRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getIndexPrice(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getInitMarginRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getInputPrice(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getInputPriceWithReserves(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getInputTwap(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getLiquidationFeeRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getMaintenanceMarginRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getMarkPrice(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getOutputPrice(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getOutputPriceWithReserves(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getOutputTwap(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getPartialLiquidationRatio(overrides?: CallOverrides): Promise<Decimal.DecimalStructOutput>;

        getRatios(overrides?: CallOverrides): Promise<IAmm.RatiosStructOutput>;

        getReserves(
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput, Decimal.DecimalStructOutput]>;

        getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

        getTwapPrice(
            _intervalInSeconds: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        initialize(
            _quoteAssetReserve: PromiseOrValue<BigNumberish>,
            _baseAssetReserve: PromiseOrValue<BigNumberish>,
            _tradeLimitRatio: PromiseOrValue<BigNumberish>,
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            _priceFeed: PromiseOrValue<string>,
            _priceFeedKey: PromiseOrValue<BytesLike>,
            _quoteAsset: PromiseOrValue<string>,
            _fluctuationLimitRatio: PromiseOrValue<BigNumberish>,
            _feeRatio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        isOverFluctuationLimit(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<boolean>;

        isOverSpreadLimit(overrides?: CallOverrides): Promise<boolean>;

        k(overrides?: CallOverrides): Promise<BigNumber>;

        lastRepegTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        level1DynamicFeeSettings(overrides?: CallOverrides): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                divergenceThresholdRatio: Decimal.DecimalStructOutput;
                feeRatio: Decimal.DecimalStructOutput;
                feeInFavorRatio: Decimal.DecimalStructOutput;
            }
        >;

        level2DynamicFeeSettings(overrides?: CallOverrides): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                divergenceThresholdRatio: Decimal.DecimalStructOutput;
                feeRatio: Decimal.DecimalStructOutput;
                feeInFavorRatio: Decimal.DecimalStructOutput;
            }
        >;

        markPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

        nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

        open(overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        priceFeed(overrides?: CallOverrides): Promise<string>;

        priceFeedKey(overrides?: CallOverrides): Promise<string>;

        quoteAsset(overrides?: CallOverrides): Promise<string>;

        quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        repegBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        repegK(
            _multiplier: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput
            ]
        >;

        repegPrice(
            overrides?: CallOverrides
        ): Promise<
            [
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput
            ]
        >;

        reserveSnapshots(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [Decimal.DecimalStructOutput, Decimal.DecimalStructOutput, BigNumber, BigNumber] & {
                quoteAssetReserve: Decimal.DecimalStructOutput;
                baseAssetReserve: Decimal.DecimalStructOutput;
                timestamp: BigNumber;
                blockNumber: BigNumber;
            }
        >;

        setCap(
            _maxHoldingBaseAsset: Decimal.DecimalStruct,
            _openInterestNotionalCap: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setCounterParty(
            _counterParty: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        setFeeRatio(_feeRatio: Decimal.DecimalStruct, overrides?: CallOverrides): Promise<void>;

        setFluctuationLimitRatio(
            _fluctuationLimitRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setFundingPeriod(
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        setInitMarginRatio(
            _initMarginRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setLevel1DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setLevel2DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setLiquidationFeeRatio(
            _liquidationFeeRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setMaintenanceMarginRatio(
            _maintenanceMarginRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setMarkPriceTwapInterval(
            _interval: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        setOpen(_open: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;

        setPartialLiquidationRatio(
            _partialLiquidationRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        setRepegBufferPeriod(
            _repegBufferPeriod: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        setTradeLimitRatio(
            _tradeLimitRatio: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        settleFunding(overrides?: CallOverrides): Promise<
            [
                SignedDecimal.SignedDecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                premiumFraction: SignedDecimal.SignedDecimalStructOutput;
                markPrice: Decimal.DecimalStructOutput;
                indexPrice: Decimal.DecimalStructOutput;
            }
        >;

        swapInput(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            _canOverFluctuationLimit: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        swapOutput(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

        tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        updateFundingRate(
            _premiumFractionLong: SignedDecimal.SignedDecimalStruct,
            _premiumFractionShort: SignedDecimal.SignedDecimalStruct,
            _underlyingPrice: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "CapChanged(uint256,uint256)"(
            maxHoldingBaseAsset?: null,
            openInterestNotionalCap?: null
        ): CapChangedEventFilter;
        CapChanged(
            maxHoldingBaseAsset?: null,
            openInterestNotionalCap?: null
        ): CapChangedEventFilter;

        "FeeRatioChanged(uint256)"(ratio?: null): FeeRatioChangedEventFilter;
        FeeRatioChanged(ratio?: null): FeeRatioChangedEventFilter;

        "FluctuationLimitRatioChanged(uint256)"(
            ratio?: null
        ): FluctuationLimitRatioChangedEventFilter;
        FluctuationLimitRatioChanged(ratio?: null): FluctuationLimitRatioChangedEventFilter;

        "FundingPeriodChanged(uint256)"(fundingPeriod?: null): FundingPeriodChangedEventFilter;
        FundingPeriodChanged(fundingPeriod?: null): FundingPeriodChangedEventFilter;

        "FundingRateUpdated(int256,int256,uint256)"(
            fundingRateLong?: null,
            fundingRateShort?: null,
            underlyingPrice?: null
        ): FundingRateUpdatedEventFilter;
        FundingRateUpdated(
            fundingRateLong?: null,
            fundingRateShort?: null,
            underlyingPrice?: null
        ): FundingRateUpdatedEventFilter;

        "InitMarginRatioChanged(uint256)"(ratio?: null): InitMarginRatioChangedEventFilter;
        InitMarginRatioChanged(ratio?: null): InitMarginRatioChangedEventFilter;

        "Level1DynamicFeeSettingsChanged(uint256,uint256,uint256)"(
            divergenceThresholdRatio?: null,
            feeRatio?: null,
            feeInFavorRatio?: null
        ): Level1DynamicFeeSettingsChangedEventFilter;
        Level1DynamicFeeSettingsChanged(
            divergenceThresholdRatio?: null,
            feeRatio?: null,
            feeInFavorRatio?: null
        ): Level1DynamicFeeSettingsChangedEventFilter;

        "Level2DynamicFeeSettingsChanged(uint256,uint256,uint256)"(
            divergenceThresholdRatio?: null,
            feeRatio?: null,
            feeInFavorRatio?: null
        ): Level2DynamicFeeSettingsChangedEventFilter;
        Level2DynamicFeeSettingsChanged(
            divergenceThresholdRatio?: null,
            feeRatio?: null,
            feeInFavorRatio?: null
        ): Level2DynamicFeeSettingsChangedEventFilter;

        "LiquidationFeeRatioChanged(uint256)"(ratio?: null): LiquidationFeeRatioChangedEventFilter;
        LiquidationFeeRatioChanged(ratio?: null): LiquidationFeeRatioChangedEventFilter;

        "MaintenanceMarginRatioChanged(uint256)"(
            ratio?: null
        ): MaintenanceMarginRatioChangedEventFilter;
        MaintenanceMarginRatioChanged(ratio?: null): MaintenanceMarginRatioChangedEventFilter;

        "Open(bool)"(open?: PromiseOrValue<boolean> | null): OpenEventFilter;
        Open(open?: PromiseOrValue<boolean> | null): OpenEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        "PartialLiquidationRatioChanged(uint256)"(
            ratio?: null
        ): PartialLiquidationRatioChangedEventFilter;
        PartialLiquidationRatioChanged(ratio?: null): PartialLiquidationRatioChangedEventFilter;

        "PriceFeedUpdated(address)"(
            priceFeed?: PromiseOrValue<string> | null
        ): PriceFeedUpdatedEventFilter;
        PriceFeedUpdated(priceFeed?: PromiseOrValue<string> | null): PriceFeedUpdatedEventFilter;

        "Repeg(uint256,uint256,uint256,uint256,int256)"(
            quoteAssetReserveBefore?: null,
            baseAssetReserveBefore?: null,
            quoteAssetReserveAfter?: null,
            baseAssetReserveAfter?: null,
            repegPnl?: null
        ): RepegEventFilter;
        Repeg(
            quoteAssetReserveBefore?: null,
            baseAssetReserveBefore?: null,
            quoteAssetReserveAfter?: null,
            baseAssetReserveAfter?: null,
            repegPnl?: null
        ): RepegEventFilter;

        "ReserveSnapshotted(uint256,uint256,uint256)"(
            quoteAssetReserve?: null,
            baseAssetReserve?: null,
            timestamp?: null
        ): ReserveSnapshottedEventFilter;
        ReserveSnapshotted(
            quoteAssetReserve?: null,
            baseAssetReserve?: null,
            timestamp?: null
        ): ReserveSnapshottedEventFilter;

        "SwapInput(uint8,uint256,uint256)"(
            dir?: null,
            quoteAssetAmount?: null,
            baseAssetAmount?: null
        ): SwapInputEventFilter;
        SwapInput(
            dir?: null,
            quoteAssetAmount?: null,
            baseAssetAmount?: null
        ): SwapInputEventFilter;

        "SwapOutput(uint8,uint256,uint256)"(
            dir?: null,
            quoteAssetAmount?: null,
            baseAssetAmount?: null
        ): SwapOutputEventFilter;
        SwapOutput(
            dir?: null,
            quoteAssetAmount?: null,
            baseAssetAmount?: null
        ): SwapOutputEventFilter;

        "TradeLimitRatioChanged(uint256)"(ratio?: null): TradeLimitRatioChangedEventFilter;
        TradeLimitRatioChanged(ratio?: null): TradeLimitRatioChangedEventFilter;
    };

    estimateGas: {
        _x0(overrides?: CallOverrides): Promise<BigNumber>;

        _y0(overrides?: CallOverrides): Promise<BigNumber>;

        baseAssetDeltaThisFundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

        calcFee(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _isOpenPos: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        calcKRepegPnl(_k: Decimal.DecimalStruct, overrides?: CallOverrides): Promise<BigNumber>;

        calcPriceRepegPnl(
            _repegTo: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        counterParty(overrides?: CallOverrides): Promise<BigNumber>;

        cumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

        fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

        fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

        getBaseAssetDelta(overrides?: CallOverrides): Promise<BigNumber>;

        getCumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

        getFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getIndexPrice(overrides?: CallOverrides): Promise<BigNumber>;

        getInitMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getInputPrice(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInputPriceWithReserves(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getInputTwap(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getLiquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getMaintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

        getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<BigNumber>;

        getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<BigNumber>;

        getOutputPrice(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getOutputPriceWithReserves(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getOutputTwap(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPartialLiquidationRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getRatios(overrides?: CallOverrides): Promise<BigNumber>;

        getReserves(overrides?: CallOverrides): Promise<BigNumber>;

        getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

        getTwapPrice(
            _intervalInSeconds: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        initialize(
            _quoteAssetReserve: PromiseOrValue<BigNumberish>,
            _baseAssetReserve: PromiseOrValue<BigNumberish>,
            _tradeLimitRatio: PromiseOrValue<BigNumberish>,
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            _priceFeed: PromiseOrValue<string>,
            _priceFeedKey: PromiseOrValue<BytesLike>,
            _quoteAsset: PromiseOrValue<string>,
            _fluctuationLimitRatio: PromiseOrValue<BigNumberish>,
            _feeRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        isOverFluctuationLimit(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        isOverSpreadLimit(overrides?: CallOverrides): Promise<BigNumber>;

        k(overrides?: CallOverrides): Promise<BigNumber>;

        lastRepegTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

        level1DynamicFeeSettings(overrides?: CallOverrides): Promise<BigNumber>;

        level2DynamicFeeSettings(overrides?: CallOverrides): Promise<BigNumber>;

        markPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

        nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

        open(overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

        priceFeedKey(overrides?: CallOverrides): Promise<BigNumber>;

        quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

        quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        repegBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

        repegK(
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        repegPrice(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        reserveSnapshots(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        setCap(
            _maxHoldingBaseAsset: Decimal.DecimalStruct,
            _openInterestNotionalCap: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setCounterParty(
            _counterParty: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setFeeRatio(
            _feeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setFluctuationLimitRatio(
            _fluctuationLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setFundingPeriod(
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setInitMarginRatio(
            _initMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setLevel1DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setLevel2DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setLiquidationFeeRatio(
            _liquidationFeeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setMaintenanceMarginRatio(
            _maintenanceMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setMarkPriceTwapInterval(
            _interval: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setOpen(
            _open: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setPartialLiquidationRatio(
            _partialLiquidationRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setRepegBufferPeriod(
            _repegBufferPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setTradeLimitRatio(
            _tradeLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        settleFunding(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        swapInput(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            _canOverFluctuationLimit: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        swapOutput(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

        tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        updateFundingRate(
            _premiumFractionLong: SignedDecimal.SignedDecimalStruct,
            _premiumFractionShort: SignedDecimal.SignedDecimalStruct,
            _underlyingPrice: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        _x0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        _y0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        baseAssetDeltaThisFundingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        baseAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        calcFee(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _isOpenPos: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        calcKRepegPnl(
            _k: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        calcPriceRepegPnl(
            _repegTo: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        counterParty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        cumulativeNotional(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fluctuationLimitRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fundingBufferPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fundingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        fundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getBaseAssetDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCumulativeNotional(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getIndexPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getInitMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getInputPrice(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getInputPriceWithReserves(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getInputTwap(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getLiquidationFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMaintenanceMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMarkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getOutputPrice(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getOutputPriceWithReserves(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetPoolAmount: Decimal.DecimalStruct,
            _baseAssetPoolAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getOutputTwap(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPartialLiquidationRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRatios(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getSnapshotLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTwapPrice(
            _intervalInSeconds: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            _quoteAssetReserve: PromiseOrValue<BigNumberish>,
            _baseAssetReserve: PromiseOrValue<BigNumberish>,
            _tradeLimitRatio: PromiseOrValue<BigNumberish>,
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            _priceFeed: PromiseOrValue<string>,
            _priceFeedKey: PromiseOrValue<BytesLike>,
            _quoteAsset: PromiseOrValue<string>,
            _fluctuationLimitRatio: PromiseOrValue<BigNumberish>,
            _feeRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        isOverFluctuationLimit(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        isOverSpreadLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        lastRepegTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        level1DynamicFeeSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        level2DynamicFeeSettings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        markPriceTwapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        nextFundingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        open(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        priceFeedKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        quoteAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        repegBufferPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        repegK(
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        repegPrice(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        reserveSnapshots(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        setCap(
            _maxHoldingBaseAsset: Decimal.DecimalStruct,
            _openInterestNotionalCap: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setCounterParty(
            _counterParty: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setFeeRatio(
            _feeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setFluctuationLimitRatio(
            _fluctuationLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setFundingPeriod(
            _fundingPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setInitMarginRatio(
            _initMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setLevel1DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setLevel2DynamicFeeSettings(
            _divergenceThresholdRatio: Decimal.DecimalStruct,
            _feeRatio: Decimal.DecimalStruct,
            _feeInFavorRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setLiquidationFeeRatio(
            _liquidationFeeRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setMaintenanceMarginRatio(
            _maintenanceMarginRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setMarkPriceTwapInterval(
            _interval: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setOpen(
            _open: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setPartialLiquidationRatio(
            _partialLiquidationRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setRepegBufferPeriod(
            _repegBufferPeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setTradeLimitRatio(
            _tradeLimitRatio: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        settleFunding(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        swapInput(
            _dirOfQuote: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            _canOverFluctuationLimit: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        swapOutput(
            _dirOfBase: PromiseOrValue<BigNumberish>,
            _baseAssetAmount: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        totalPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        tradeLimitRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        updateFundingRate(
            _premiumFractionLong: SignedDecimal.SignedDecimalStruct,
            _premiumFractionShort: SignedDecimal.SignedDecimalStruct,
            _underlyingPrice: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
