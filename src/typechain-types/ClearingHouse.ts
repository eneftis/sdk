/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace Decimal {
    export type DecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type DecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace SignedDecimal {
    export type SignedDecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type SignedDecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace ClearingHouse {
    export type PositionStruct = {
        size: SignedDecimal.SignedDecimalStruct;
        margin: Decimal.DecimalStruct;
        openNotional: Decimal.DecimalStruct;
        lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStruct;
        lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStruct;
        blockNumber: PromiseOrValue<BigNumberish>;
    };

    export type PositionStructOutput = [
        SignedDecimal.SignedDecimalStructOutput,
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput,
        SignedDecimal.SignedDecimalStructOutput,
        SignedDecimal.SignedDecimalStructOutput,
        BigNumber
    ] & {
        size: SignedDecimal.SignedDecimalStructOutput;
        margin: Decimal.DecimalStructOutput;
        openNotional: Decimal.DecimalStructOutput;
        lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
        lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
        blockNumber: BigNumber;
    };
}

export interface ClearingHouseInterface extends utils.Interface {
    functions: {
        "addMargin(address,(uint256))": FunctionFragment;
        "closePosition(address,(uint256))": FunctionFragment;
        "cumulativePremiumFractionLong(address,uint256)": FunctionFragment;
        "cumulativePremiumFractionShort(address,uint256)": FunctionFragment;
        "fundingRateDeltaCapRatio()": FunctionFragment;
        "getLatestCumulativePremiumFraction(address)": FunctionFragment;
        "getMarginRatio(address,address)": FunctionFragment;
        "getPosition(address,address)": FunctionFragment;
        "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": FunctionFragment;
        "initialize(address,uint256)": FunctionFragment;
        "insuranceFund()": FunctionFragment;
        "liquidate(address,address)": FunctionFragment;
        "openInterestNotionalMap(address)": FunctionFragment;
        "openPosition(address,uint8,(uint256),(uint256),(uint256))": FunctionFragment;
        "owner()": FunctionFragment;
        "partialClose(address,(uint256),(uint256))": FunctionFragment;
        "pause()": FunctionFragment;
        "paused()": FunctionFragment;
        "positionMap(address,address)": FunctionFragment;
        "removeMargin(address,(uint256))": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "repegBots(address)": FunctionFragment;
        "repegLiquidityDepth(address,(uint256))": FunctionFragment;
        "repegPrice(address)": FunctionFragment;
        "setRepegBot(address,address)": FunctionFragment;
        "settleFunding(address)": FunctionFragment;
        "tollMap(address)": FunctionFragment;
        "totalPositionSizeMap(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "unpause()": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "addMargin"
            | "closePosition"
            | "cumulativePremiumFractionLong"
            | "cumulativePremiumFractionShort"
            | "fundingRateDeltaCapRatio"
            | "getLatestCumulativePremiumFraction"
            | "getMarginRatio"
            | "getPosition"
            | "getPositionNotionalAndUnrealizedPnl"
            | "initialize"
            | "insuranceFund"
            | "liquidate"
            | "openInterestNotionalMap"
            | "openPosition"
            | "owner"
            | "partialClose"
            | "pause"
            | "paused"
            | "positionMap"
            | "removeMargin"
            | "renounceOwnership"
            | "repegBots"
            | "repegLiquidityDepth"
            | "repegPrice"
            | "setRepegBot"
            | "settleFunding"
            | "tollMap"
            | "totalPositionSizeMap"
            | "transferOwnership"
            | "unpause"
    ): FunctionFragment;

    encodeFunctionData(
        functionFragment: "addMargin",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "closePosition",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(
        functionFragment: "cumulativePremiumFractionLong",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "cumulativePremiumFractionShort",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "fundingRateDeltaCapRatio", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getLatestCumulativePremiumFraction",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getMarginRatio",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getPosition",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getPositionNotionalAndUnrealizedPnl",
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "insuranceFund", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "liquidate",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "openInterestNotionalMap",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "openPosition",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct,
            Decimal.DecimalStruct
        ]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "partialClose",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "positionMap",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "removeMargin",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "repegBots", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "repegLiquidityDepth",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct]
    ): string;
    encodeFunctionData(functionFragment: "repegPrice", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "setRepegBot",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "settleFunding", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "tollMap", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(
        functionFragment: "totalPositionSizeMap",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

    decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "closePosition", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "cumulativePremiumFractionLong",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "cumulativePremiumFractionShort",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "fundingRateDeltaCapRatio", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getLatestCumulativePremiumFraction",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPosition", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getPositionNotionalAndUnrealizedPnl",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "insuranceFund", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "openInterestNotionalMap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "openPosition", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "partialClose", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "positionMap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeMargin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegBots", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegLiquidityDepth", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "repegPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRepegBot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "settleFunding", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tollMap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalPositionSizeMap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

    events: {
        "FundingPayment(address,uint256,uint256,int256,int256,int256)": EventFragment;
        "MarginChanged(address,address,int256,int256)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "Paused(address)": EventFragment;
        "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": EventFragment;
        "PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
        "Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)": EventFragment;
        "RepegBotSet(address,address)": EventFragment;
        "Unpaused(address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "FundingPayment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MarginChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Repeg"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RepegBotSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FundingPaymentEventObject {
    amm: string;
    markPrice: BigNumber;
    indexPrice: BigNumber;
    premiumFractionLong: BigNumber;
    premiumFractionShort: BigNumber;
    insuranceFundPnl: BigNumber;
}
export type FundingPaymentEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    FundingPaymentEventObject
>;

export type FundingPaymentEventFilter = TypedEventFilter<FundingPaymentEvent>;

export interface MarginChangedEventObject {
    trader: string;
    amm: string;
    amount: BigNumber;
    fundingPayment: BigNumber;
}
export type MarginChangedEvent = TypedEvent<
    [string, string, BigNumber, BigNumber],
    MarginChangedEventObject
>;

export type MarginChangedEventFilter = TypedEventFilter<MarginChangedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
    account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PositionChangedEventObject {
    trader: string;
    amm: string;
    margin: BigNumber;
    exchangedPositionNotional: BigNumber;
    exchangedPositionSize: BigNumber;
    fee: BigNumber;
    positionSizeAfter: BigNumber;
    realizedPnl: BigNumber;
    unrealizedPnlAfter: BigNumber;
    badDebt: BigNumber;
    liquidationPenalty: BigNumber;
    markPrice: BigNumber;
    fundingPayment: BigNumber;
}
export type PositionChangedEvent = TypedEvent<
    [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ],
    PositionChangedEventObject
>;

export type PositionChangedEventFilter = TypedEventFilter<PositionChangedEvent>;

export interface PositionLiquidatedEventObject {
    trader: string;
    amm: string;
    liquidator: string;
    liquidatedPositionNotional: BigNumber;
    liquidatedPositionSize: BigNumber;
    liquidationReward: BigNumber;
    insuranceFundProfit: BigNumber;
    badDebt: BigNumber;
}
export type PositionLiquidatedEvent = TypedEvent<
    [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    PositionLiquidatedEventObject
>;

export type PositionLiquidatedEventFilter = TypedEventFilter<PositionLiquidatedEvent>;

export interface RepegEventObject {
    amm: string;
    quoteAssetReserveBefore: BigNumber;
    baseAssetReserveBefore: BigNumber;
    quoteAssetReserveAfter: BigNumber;
    baseAssetReserveAfter: BigNumber;
    repegPnl: BigNumber;
    repegDebt: BigNumber;
}
export type RepegEvent = TypedEvent<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    RepegEventObject
>;

export type RepegEventFilter = TypedEventFilter<RepegEvent>;

export interface RepegBotSetEventObject {
    amm: string;
    bot: string;
}
export type RepegBotSetEvent = TypedEvent<[string, string], RepegBotSetEventObject>;

export type RepegBotSetEventFilter = TypedEventFilter<RepegBotSetEvent>;

export interface UnpausedEventObject {
    account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ClearingHouse extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: ClearingHouseInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        addMargin(
            _amm: PromiseOrValue<string>,
            _addedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        closePosition(
            _amm: PromiseOrValue<string>,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        cumulativePremiumFractionLong(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        cumulativePremiumFractionShort(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        fundingRateDeltaCapRatio(
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        getLatestCumulativePremiumFraction(
            _amm: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                latestCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
                latestCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

        getPosition(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[ClearingHouse.PositionStructOutput]>;

        getPositionNotionalAndUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            _pnlCalcOption: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                positionNotional: Decimal.DecimalStructOutput;
                unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        initialize(
            _insuranceFund: PromiseOrValue<string>,
            _fundingRateDeltaCapRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        insuranceFund(overrides?: CallOverrides): Promise<[string]>;

        liquidate(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        openInterestNotionalMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        openPosition(
            _amm: PromiseOrValue<string>,
            _side: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _leverage: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        partialClose(
            _amm: PromiseOrValue<string>,
            _partialCloseRatio: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        pause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        paused(overrides?: CallOverrides): Promise<[boolean]>;

        positionMap(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [
                SignedDecimal.SignedDecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput,
                BigNumber
            ] & {
                size: SignedDecimal.SignedDecimalStructOutput;
                margin: Decimal.DecimalStructOutput;
                openNotional: Decimal.DecimalStructOutput;
                lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
                lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
                blockNumber: BigNumber;
            }
        >;

        removeMargin(
            _amm: PromiseOrValue<string>,
            _removedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        repegBots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;

        repegLiquidityDepth(
            _amm: PromiseOrValue<string>,
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        repegPrice(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setRepegBot(
            _amm: PromiseOrValue<string>,
            _repegBot: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        settleFunding(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        tollMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { d: BigNumber }>;

        totalPositionSizeMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [
                SignedDecimal.SignedDecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                netPositionSize: SignedDecimal.SignedDecimalStructOutput;
                positionSizeLong: Decimal.DecimalStructOutput;
                positionSizeShort: Decimal.DecimalStructOutput;
            }
        >;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        unpause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    addMargin(
        _amm: PromiseOrValue<string>,
        _addedMargin: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closePosition(
        _amm: PromiseOrValue<string>,
        _quoteAssetAmountLimit: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cumulativePremiumFractionLong(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativePremiumFractionShort(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingRateDeltaCapRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestCumulativePremiumFraction(
        _amm: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<
        [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
            latestCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
            latestCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
        }
    >;

    getMarginRatio(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getPosition(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<ClearingHouse.PositionStructOutput>;

    getPositionNotionalAndUnrealizedPnl(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        _pnlCalcOption: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
            positionNotional: Decimal.DecimalStructOutput;
            unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
        }
    >;

    initialize(
        _insuranceFund: PromiseOrValue<string>,
        _fundingRateDeltaCapRatio: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    liquidate(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openInterestNotionalMap(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
        _amm: PromiseOrValue<string>,
        _side: PromiseOrValue<BigNumberish>,
        _quoteAssetAmount: Decimal.DecimalStruct,
        _leverage: Decimal.DecimalStruct,
        _baseAssetAmountLimit: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    partialClose(
        _amm: PromiseOrValue<string>,
        _partialCloseRatio: Decimal.DecimalStruct,
        _quoteAssetAmountLimit: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    positionMap(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<
        [
            SignedDecimal.SignedDecimalStructOutput,
            Decimal.DecimalStructOutput,
            Decimal.DecimalStructOutput,
            SignedDecimal.SignedDecimalStructOutput,
            SignedDecimal.SignedDecimalStructOutput,
            BigNumber
        ] & {
            size: SignedDecimal.SignedDecimalStructOutput;
            margin: Decimal.DecimalStructOutput;
            openNotional: Decimal.DecimalStructOutput;
            lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
            lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
            blockNumber: BigNumber;
        }
    >;

    removeMargin(
        _amm: PromiseOrValue<string>,
        _removedMargin: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repegBots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

    repegLiquidityDepth(
        _amm: PromiseOrValue<string>,
        _multiplier: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repegPrice(
        _amm: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRepegBot(
        _amm: PromiseOrValue<string>,
        _repegBot: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleFunding(
        _amm: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tollMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionSizeMap(
        arg0: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<
        [
            SignedDecimal.SignedDecimalStructOutput,
            Decimal.DecimalStructOutput,
            Decimal.DecimalStructOutput
        ] & {
            netPositionSize: SignedDecimal.SignedDecimalStructOutput;
            positionSizeLong: Decimal.DecimalStructOutput;
            positionSizeShort: Decimal.DecimalStructOutput;
        }
    >;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        addMargin(
            _amm: PromiseOrValue<string>,
            _addedMargin: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        closePosition(
            _amm: PromiseOrValue<string>,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        cumulativePremiumFractionLong(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        cumulativePremiumFractionShort(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        fundingRateDeltaCapRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getLatestCumulativePremiumFraction(
            _amm: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [SignedDecimal.SignedDecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                latestCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
                latestCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        getPosition(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<ClearingHouse.PositionStructOutput>;

        getPositionNotionalAndUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            _pnlCalcOption: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [Decimal.DecimalStructOutput, SignedDecimal.SignedDecimalStructOutput] & {
                positionNotional: Decimal.DecimalStructOutput;
                unrealizedPnl: SignedDecimal.SignedDecimalStructOutput;
            }
        >;

        initialize(
            _insuranceFund: PromiseOrValue<string>,
            _fundingRateDeltaCapRatio: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>;

        insuranceFund(overrides?: CallOverrides): Promise<string>;

        liquidate(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        openInterestNotionalMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        openPosition(
            _amm: PromiseOrValue<string>,
            _side: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _leverage: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        partialClose(
            _amm: PromiseOrValue<string>,
            _partialCloseRatio: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        pause(overrides?: CallOverrides): Promise<void>;

        paused(overrides?: CallOverrides): Promise<boolean>;

        positionMap(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [
                SignedDecimal.SignedDecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput,
                SignedDecimal.SignedDecimalStructOutput,
                BigNumber
            ] & {
                size: SignedDecimal.SignedDecimalStructOutput;
                margin: Decimal.DecimalStructOutput;
                openNotional: Decimal.DecimalStructOutput;
                lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
                lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
                blockNumber: BigNumber;
            }
        >;

        removeMargin(
            _amm: PromiseOrValue<string>,
            _removedMargin: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        repegBots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

        repegLiquidityDepth(
            _amm: PromiseOrValue<string>,
            _multiplier: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        repegPrice(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        setRepegBot(
            _amm: PromiseOrValue<string>,
            _repegBot: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        settleFunding(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        tollMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        totalPositionSizeMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [
                SignedDecimal.SignedDecimalStructOutput,
                Decimal.DecimalStructOutput,
                Decimal.DecimalStructOutput
            ] & {
                netPositionSize: SignedDecimal.SignedDecimalStructOutput;
                positionSizeLong: Decimal.DecimalStructOutput;
                positionSizeShort: Decimal.DecimalStructOutput;
            }
        >;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        unpause(overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "FundingPayment(address,uint256,uint256,int256,int256,int256)"(
            amm?: PromiseOrValue<string> | null,
            markPrice?: null,
            indexPrice?: null,
            premiumFractionLong?: null,
            premiumFractionShort?: null,
            insuranceFundPnl?: null
        ): FundingPaymentEventFilter;
        FundingPayment(
            amm?: PromiseOrValue<string> | null,
            markPrice?: null,
            indexPrice?: null,
            premiumFractionLong?: null,
            premiumFractionShort?: null,
            insuranceFundPnl?: null
        ): FundingPaymentEventFilter;

        "MarginChanged(address,address,int256,int256)"(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            amount?: null,
            fundingPayment?: null
        ): MarginChangedEventFilter;
        MarginChanged(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            amount?: null,
            fundingPayment?: null
        ): MarginChangedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        "Paused(address)"(account?: null): PausedEventFilter;
        Paused(account?: null): PausedEventFilter;

        "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)"(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            margin?: null,
            exchangedPositionNotional?: null,
            exchangedPositionSize?: null,
            fee?: null,
            positionSizeAfter?: null,
            realizedPnl?: null,
            unrealizedPnlAfter?: null,
            badDebt?: null,
            liquidationPenalty?: null,
            markPrice?: null,
            fundingPayment?: null
        ): PositionChangedEventFilter;
        PositionChanged(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            margin?: null,
            exchangedPositionNotional?: null,
            exchangedPositionSize?: null,
            fee?: null,
            positionSizeAfter?: null,
            realizedPnl?: null,
            unrealizedPnlAfter?: null,
            badDebt?: null,
            liquidationPenalty?: null,
            markPrice?: null,
            fundingPayment?: null
        ): PositionChangedEventFilter;

        "PositionLiquidated(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            liquidator?: PromiseOrValue<string> | null,
            liquidatedPositionNotional?: null,
            liquidatedPositionSize?: null,
            liquidationReward?: null,
            insuranceFundProfit?: null,
            badDebt?: null
        ): PositionLiquidatedEventFilter;
        PositionLiquidated(
            trader?: PromiseOrValue<string> | null,
            amm?: PromiseOrValue<string> | null,
            liquidator?: PromiseOrValue<string> | null,
            liquidatedPositionNotional?: null,
            liquidatedPositionSize?: null,
            liquidationReward?: null,
            insuranceFundProfit?: null,
            badDebt?: null
        ): PositionLiquidatedEventFilter;

        "Repeg(address,uint256,uint256,uint256,uint256,int256,uint256)"(
            amm?: PromiseOrValue<string> | null,
            quoteAssetReserveBefore?: null,
            baseAssetReserveBefore?: null,
            quoteAssetReserveAfter?: null,
            baseAssetReserveAfter?: null,
            repegPnl?: null,
            repegDebt?: null
        ): RepegEventFilter;
        Repeg(
            amm?: PromiseOrValue<string> | null,
            quoteAssetReserveBefore?: null,
            baseAssetReserveBefore?: null,
            quoteAssetReserveAfter?: null,
            baseAssetReserveAfter?: null,
            repegPnl?: null,
            repegDebt?: null
        ): RepegEventFilter;

        "RepegBotSet(address,address)"(
            amm?: PromiseOrValue<string> | null,
            bot?: PromiseOrValue<string> | null
        ): RepegBotSetEventFilter;
        RepegBotSet(
            amm?: PromiseOrValue<string> | null,
            bot?: PromiseOrValue<string> | null
        ): RepegBotSetEventFilter;

        "Unpaused(address)"(account?: null): UnpausedEventFilter;
        Unpaused(account?: null): UnpausedEventFilter;
    };

    estimateGas: {
        addMargin(
            _amm: PromiseOrValue<string>,
            _addedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        closePosition(
            _amm: PromiseOrValue<string>,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        cumulativePremiumFractionLong(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        cumulativePremiumFractionShort(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        fundingRateDeltaCapRatio(overrides?: CallOverrides): Promise<BigNumber>;

        getLatestCumulativePremiumFraction(
            _amm: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPosition(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPositionNotionalAndUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            _pnlCalcOption: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        initialize(
            _insuranceFund: PromiseOrValue<string>,
            _fundingRateDeltaCapRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

        liquidate(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        openInterestNotionalMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        openPosition(
            _amm: PromiseOrValue<string>,
            _side: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _leverage: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        partialClose(
            _amm: PromiseOrValue<string>,
            _partialCloseRatio: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        paused(overrides?: CallOverrides): Promise<BigNumber>;

        positionMap(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        removeMargin(
            _amm: PromiseOrValue<string>,
            _removedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        repegBots(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        repegLiquidityDepth(
            _amm: PromiseOrValue<string>,
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        repegPrice(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setRepegBot(
            _amm: PromiseOrValue<string>,
            _repegBot: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        settleFunding(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        tollMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        totalPositionSizeMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
    };

    populateTransaction: {
        addMargin(
            _amm: PromiseOrValue<string>,
            _addedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        closePosition(
            _amm: PromiseOrValue<string>,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        cumulativePremiumFractionLong(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        cumulativePremiumFractionShort(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        fundingRateDeltaCapRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getLatestCumulativePremiumFraction(
            _amm: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPosition(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPositionNotionalAndUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            _pnlCalcOption: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            _insuranceFund: PromiseOrValue<string>,
            _fundingRateDeltaCapRatio: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        liquidate(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        openInterestNotionalMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        openPosition(
            _amm: PromiseOrValue<string>,
            _side: PromiseOrValue<BigNumberish>,
            _quoteAssetAmount: Decimal.DecimalStruct,
            _leverage: Decimal.DecimalStruct,
            _baseAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        partialClose(
            _amm: PromiseOrValue<string>,
            _partialCloseRatio: Decimal.DecimalStruct,
            _quoteAssetAmountLimit: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        pause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        positionMap(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        removeMargin(
            _amm: PromiseOrValue<string>,
            _removedMargin: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        repegBots(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        repegLiquidityDepth(
            _amm: PromiseOrValue<string>,
            _multiplier: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        repegPrice(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setRepegBot(
            _amm: PromiseOrValue<string>,
            _repegBot: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        settleFunding(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        tollMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        totalPositionSizeMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        unpause(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
