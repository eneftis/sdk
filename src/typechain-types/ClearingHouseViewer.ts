/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace SignedDecimal {
    export type SignedDecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type SignedDecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace Decimal {
    export type DecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type DecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export declare namespace ClearingHouse {
    export type PositionStruct = {
        size: SignedDecimal.SignedDecimalStruct;
        margin: Decimal.DecimalStruct;
        openNotional: Decimal.DecimalStruct;
        lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStruct;
        lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStruct;
        blockNumber: PromiseOrValue<BigNumberish>;
    };

    export type PositionStructOutput = [
        SignedDecimal.SignedDecimalStructOutput,
        Decimal.DecimalStructOutput,
        Decimal.DecimalStructOutput,
        SignedDecimal.SignedDecimalStructOutput,
        SignedDecimal.SignedDecimalStructOutput,
        BigNumber
    ] & {
        size: SignedDecimal.SignedDecimalStructOutput;
        margin: Decimal.DecimalStructOutput;
        openNotional: Decimal.DecimalStructOutput;
        lastUpdatedCumulativePremiumFractionLong: SignedDecimal.SignedDecimalStructOutput;
        lastUpdatedCumulativePremiumFractionShort: SignedDecimal.SignedDecimalStructOutput;
        blockNumber: BigNumber;
    };
}

export interface ClearingHouseViewerInterface extends utils.Interface {
    functions: {
        "clearingHouse()": FunctionFragment;
        "getFreeCollateral(address,address)": FunctionFragment;
        "getMarginRatio(address,address)": FunctionFragment;
        "getPersonalBalanceWithFundingPayment(address,address)": FunctionFragment;
        "getPersonalPositionWithFundingPayment(address,address)": FunctionFragment;
        "getUnrealizedPnl(address,address)": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "clearingHouse"
            | "getFreeCollateral"
            | "getMarginRatio"
            | "getPersonalBalanceWithFundingPayment"
            | "getPersonalPositionWithFundingPayment"
            | "getUnrealizedPnl"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "clearingHouse", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "getFreeCollateral",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getMarginRatio",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getPersonalBalanceWithFundingPayment",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getPersonalPositionWithFundingPayment",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "getUnrealizedPnl",
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string;

    decodeFunctionResult(functionFragment: "clearingHouse", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFreeCollateral", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getMarginRatio", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "getPersonalBalanceWithFundingPayment",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPersonalPositionWithFundingPayment",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "getUnrealizedPnl", data: BytesLike): Result;

    events: {};
}

export interface ClearingHouseViewer extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: ClearingHouseViewerInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        clearingHouse(overrides?: CallOverrides): Promise<[string]>;

        getFreeCollateral(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;

        getPersonalBalanceWithFundingPayment(
            _quoteToken: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[Decimal.DecimalStructOutput] & { margin: Decimal.DecimalStructOutput }>;

        getPersonalPositionWithFundingPayment(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [ClearingHouse.PositionStructOutput] & {
                position: ClearingHouse.PositionStructOutput;
            }
        >;

        getUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[SignedDecimal.SignedDecimalStructOutput]>;
    };

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    getFreeCollateral(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getMarginRatio(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    getPersonalBalanceWithFundingPayment(
        _quoteToken: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<Decimal.DecimalStructOutput>;

    getPersonalPositionWithFundingPayment(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<ClearingHouse.PositionStructOutput>;

    getUnrealizedPnl(
        _amm: PromiseOrValue<string>,
        _trader: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<SignedDecimal.SignedDecimalStructOutput>;

    callStatic: {
        clearingHouse(overrides?: CallOverrides): Promise<string>;

        getFreeCollateral(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;

        getPersonalBalanceWithFundingPayment(
            _quoteToken: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<Decimal.DecimalStructOutput>;

        getPersonalPositionWithFundingPayment(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<ClearingHouse.PositionStructOutput>;

        getUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<SignedDecimal.SignedDecimalStructOutput>;
    };

    filters: {};

    estimateGas: {
        clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

        getFreeCollateral(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPersonalBalanceWithFundingPayment(
            _quoteToken: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getPersonalPositionWithFundingPayment(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getFreeCollateral(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getMarginRatio(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPersonalBalanceWithFundingPayment(
            _quoteToken: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getPersonalPositionWithFundingPayment(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getUnrealizedPnl(
            _amm: PromiseOrValue<string>,
            _trader: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
