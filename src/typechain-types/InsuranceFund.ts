/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue,
} from "./common";

export declare namespace Decimal {
    export type DecimalStruct = { d: PromiseOrValue<BigNumberish> };

    export type DecimalStructOutput = [BigNumber] & { d: BigNumber };
}

export interface InsuranceFundInterface extends utils.Interface {
    functions: {
        "addAmm(address)": FunctionFragment;
        "ammMap(address)": FunctionFragment;
        "getAllAmms()": FunctionFragment;
        "getQuoteTokenLength()": FunctionFragment;
        "initialize()": FunctionFragment;
        "isExistedAmm(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "quoteTokens(uint256)": FunctionFragment;
        "removeAmm(address)": FunctionFragment;
        "removeToken(address)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setBeneficiary(address)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "withdraw(address,(uint256))": FunctionFragment;
    };

    getFunction(
        nameOrSignatureOrTopic:
            | "addAmm"
            | "ammMap"
            | "getAllAmms"
            | "getQuoteTokenLength"
            | "initialize"
            | "isExistedAmm"
            | "owner"
            | "quoteTokens"
            | "removeAmm"
            | "removeToken"
            | "renounceOwnership"
            | "setBeneficiary"
            | "transferOwnership"
            | "withdraw"
    ): FunctionFragment;

    encodeFunctionData(functionFragment: "addAmm", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "ammMap", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getAllAmms", values?: undefined): string;
    encodeFunctionData(functionFragment: "getQuoteTokenLength", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values?: undefined): string;
    encodeFunctionData(functionFragment: "isExistedAmm", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "quoteTokens",
        values: [PromiseOrValue<BigNumberish>]
    ): string;
    encodeFunctionData(functionFragment: "removeAmm", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "removeToken", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "setBeneficiary",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [PromiseOrValue<string>]
    ): string;
    encodeFunctionData(
        functionFragment: "withdraw",
        values: [PromiseOrValue<string>, Decimal.DecimalStruct]
    ): string;

    decodeFunctionResult(functionFragment: "addAmm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ammMap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllAmms", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getQuoteTokenLength", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isExistedAmm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "quoteTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeAmm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBeneficiary", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

    events: {
        "AmmAdded(address)": EventFragment;
        "AmmRemoved(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "TokenAdded(address)": EventFragment;
        "TokenRemoved(address)": EventFragment;
        "Withdrawn(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "AmmAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AmmRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AmmAddedEventObject {
    amm: string;
}
export type AmmAddedEvent = TypedEvent<[string], AmmAddedEventObject>;

export type AmmAddedEventFilter = TypedEventFilter<AmmAddedEvent>;

export interface AmmRemovedEventObject {
    amm: string;
}
export type AmmRemovedEvent = TypedEvent<[string], AmmRemovedEventObject>;

export type AmmRemovedEventFilter = TypedEventFilter<AmmRemovedEvent>;

export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenAddedEventObject {
    tokenAddress: string;
}
export type TokenAddedEvent = TypedEvent<[string], TokenAddedEventObject>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface TokenRemovedEventObject {
    tokenAddress: string;
}
export type TokenRemovedEvent = TypedEvent<[string], TokenRemovedEventObject>;

export type TokenRemovedEventFilter = TypedEventFilter<TokenRemovedEvent>;

export interface WithdrawnEventObject {
    withdrawer: string;
    amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<[string, BigNumber], WithdrawnEventObject>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface InsuranceFund extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: InsuranceFundInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        addAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        ammMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

        getAllAmms(overrides?: CallOverrides): Promise<[string[]]>;

        getQuoteTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

        initialize(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        isExistedAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        quoteTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>;

        removeAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        removeToken(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        setBeneficiary(
            _beneficiary: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;

        withdraw(
            _quoteToken: PromiseOrValue<string>,
            _amount: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>;
    };

    addAmm(
        _amm: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ammMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    getAllAmms(overrides?: CallOverrides): Promise<string[]>;

    getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isExistedAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

    removeAmm(
        _amm: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeToken(
        _token: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeneficiary(
        _beneficiary: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
        _quoteToken: PromiseOrValue<string>,
        _amount: Decimal.DecimalStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callStatic: {
        addAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        ammMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        getAllAmms(overrides?: CallOverrides): Promise<string[]>;

        getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(overrides?: CallOverrides): Promise<void>;

        isExistedAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

        owner(overrides?: CallOverrides): Promise<string>;

        quoteTokens(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

        removeAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        removeToken(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        setBeneficiary(
            _beneficiary: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>;

        withdraw(
            _quoteToken: PromiseOrValue<string>,
            _amount: Decimal.DecimalStruct,
            overrides?: CallOverrides
        ): Promise<void>;
    };

    filters: {
        "AmmAdded(address)"(amm?: null): AmmAddedEventFilter;
        AmmAdded(amm?: null): AmmAddedEventFilter;

        "AmmRemoved(address)"(amm?: null): AmmRemovedEventFilter;
        AmmRemoved(amm?: null): AmmRemovedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter;

        "TokenAdded(address)"(tokenAddress?: null): TokenAddedEventFilter;
        TokenAdded(tokenAddress?: null): TokenAddedEventFilter;

        "TokenRemoved(address)"(tokenAddress?: null): TokenRemovedEventFilter;
        TokenRemoved(tokenAddress?: null): TokenRemovedEventFilter;

        "Withdrawn(address,uint256)"(withdrawer?: null, amount?: null): WithdrawnEventFilter;
        Withdrawn(withdrawer?: null, amount?: null): WithdrawnEventFilter;
    };

    estimateGas: {
        addAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        ammMap(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        getAllAmms(overrides?: CallOverrides): Promise<BigNumber>;

        getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

        initialize(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

        isExistedAmm(_amm: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        quoteTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        removeAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        removeToken(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        setBeneficiary(
            _beneficiary: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;

        withdraw(
            _quoteToken: PromiseOrValue<string>,
            _amount: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        addAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        ammMap(
            arg0: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getAllAmms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getQuoteTokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        initialize(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        isExistedAmm(
            _amm: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        quoteTokens(
            arg0: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        removeAmm(
            _amm: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        removeToken(
            _token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        setBeneficiary(
            _beneficiary: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;

        withdraw(
            _quoteToken: PromiseOrValue<string>,
            _amount: Decimal.DecimalStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>;
    };
}
